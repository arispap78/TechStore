package VIEW;

import MODEL.Order;
import CONTROLLER.OrderCon;
import MODEL.OrderString;
import MODEL.ProductManager;
import MODEL.User;
import static VIEW.Login.ipallilos;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class OrderCreateView extends javax.swing.JFrame {

    /**
     * Creates new form ProductView
     */
    public OrderCreateView() {
        initComponents();
        //display on the center of the screen
        this.setLocationRelativeTo(null);
    }

    //instance of CONTROLLER for its methods
    OrderCon ordercon=new OrderCon();
    //the choice of the category
    String jboxproduct;
    //the choice of the model
    String jboxmodel;
    //the model as an input in textfield
    String jTextModel;
    //the brand of the model in textfield
    String jTextBrand;
    //the final choice of the model 
    String jmodel;
    //the choice from the list of the models
    String jboxmodelChoice;
    //the brand of the selected model
    String marka;
    //the quantity of the selected model
    String quantity;
    //the saved order
    String paraggelia;
    //the list of the models in the order
    private ArrayList<OrderString> OrderModelList=new ArrayList<>();
    //the list of the models in the order as strings
    private ArrayList<String> OrderList=new ArrayList<>();
    //the list of the jTable
    DefaultTableModel lista;
    //list of the deleted products with only the name of the model
    private ArrayList<String> deletedList=new ArrayList<>();
    //list of the deleted products in strings
    private ArrayList<String> finaDeletedlList=new ArrayList<>();
    //confirmation of the save of the order in the database
    boolean saved=false;
    
    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jComboBoxProduct = new javax.swing.JComboBox<>();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTableOrder = new javax.swing.JTable();
        jButtonAdd = new javax.swing.JButton();
        jButtonDelete = new javax.swing.JButton();
        jButtonSave = new javax.swing.JButton();
        jComboBoxModel = new javax.swing.JComboBox<>();
        jLabel11 = new javax.swing.JLabel();
        jTextWriteBrand = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jTextItems = new javax.swing.JTextField();
        jTextWriteModel = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("CREATE ORDER");

        jPanel1.setBackground(new java.awt.Color(255, 255, 153));
        jPanel1.setName(""); // NOI18N

        jLabel9.setFont(new java.awt.Font("Rockwell", 1, 24)); // NOI18N
        jLabel9.setText("CHOOSE A PRODUCT:");

        jComboBoxProduct.setFont(new java.awt.Font("Rockwell", 1, 24)); // NOI18N
        jComboBoxProduct.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "CATEGORY...", "TELEVISION", "CAMERA", "MOBILE", "LAPTOP" }));
        jComboBoxProduct.setToolTipText("");
        jComboBoxProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxProductActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Rockwell", 1, 24)); // NOI18N
        jLabel10.setText("CHOOSE THE MODEL:");
        jLabel10.setToolTipText("");

        jTableOrder.setFont(new java.awt.Font("Rockwell", 1, 18)); // NOI18N
        jTableOrder.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "PRODUCT", "BRAND", "MODEL", "QUANTITY"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTableOrder.setColumnSelectionAllowed(true);
        jScrollPane3.setViewportView(jTableOrder);
        jTableOrder.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);

        jButtonAdd.setBackground(new java.awt.Color(0, 255, 0));
        jButtonAdd.setFont(new java.awt.Font("Rockwell", 1, 24)); // NOI18N
        jButtonAdd.setText("ADD");
        jButtonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddActionPerformed(evt);
            }
        });

        jButtonDelete.setBackground(new java.awt.Color(255, 51, 51));
        jButtonDelete.setFont(new java.awt.Font("Rockwell", 1, 24)); // NOI18N
        jButtonDelete.setText("DELETE");
        jButtonDelete.setToolTipText("");
        jButtonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteActionPerformed(evt);
            }
        });

        jButtonSave.setBackground(new java.awt.Color(0, 0, 255));
        jButtonSave.setFont(new java.awt.Font("Rockwell", 1, 24)); // NOI18N
        jButtonSave.setText("SAVE");
        jButtonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveActionPerformed(evt);
            }
        });

        jComboBoxModel.setFont(new java.awt.Font("Rockwell", 1, 24)); // NOI18N
        jComboBoxModel.setToolTipText("");
        jComboBoxModel.setAutoscrolls(true);
        jComboBoxModel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxModelActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Rockwell", 1, 24)); // NOI18N
        jLabel11.setText("OR WRITE THE BRAND:");
        jLabel11.setToolTipText("");

        jTextWriteBrand.setFont(new java.awt.Font("Rockwell", 1, 24)); // NOI18N

        jLabel3.setFont(new java.awt.Font("Rockwell", 1, 24)); // NOI18N
        jLabel3.setText("ITEM(S):");

        jTextItems.setFont(new java.awt.Font("Rockwell", 1, 24)); // NOI18N
        jTextItems.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextItemsKeyTyped(evt);
            }
        });

        jTextWriteModel.setFont(new java.awt.Font("Rockwell", 1, 24)); // NOI18N

        jLabel12.setFont(new java.awt.Font("Rockwell", 1, 24)); // NOI18N
        jLabel12.setText("WRITE THE MODEL:");
        jLabel12.setToolTipText("");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(12, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel10)
                            .addComponent(jLabel9)
                            .addComponent(jLabel3)
                            .addComponent(jLabel11)
                            .addComponent(jLabel12))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jComboBoxModel, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jComboBoxProduct, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jTextWriteBrand)
                            .addComponent(jTextItems)
                            .addComponent(jTextWriteModel)))
                    .addComponent(jScrollPane3)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButtonDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                        .addComponent(jButtonAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(34, 34, 34)
                        .addComponent(jButtonSave, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(41, 41, 41))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxProduct, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextWriteBrand, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jComboBoxModel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextWriteModel, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextItems, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonSave, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26))
        );

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 48)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(51, 51, 0));
        jLabel1.setText("                Μake Αn Οrder");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    //the choice of the model
    private void jComboBoxModelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxModelActionPerformed
        //if there are models in the list of jComboBox 
        if(jComboBoxModel.getItemCount()>0)
        {
            //the choice of the user
            jboxmodelChoice=jComboBoxModel.getSelectedItem().toString();
            //if the user hasn t choose any model
            if(jboxmodelChoice=="MODELS...")
            {
                JOptionPane.showMessageDialog(null,"Please choose a model");
                jboxmodelChoice=null;
            }
            else
            {
                //separate the string,first argument the brand and second the model
                String[] s=jboxmodelChoice.split(":");
                marka=s[0];
                jboxmodel=s[1];
            }
        }
    }//GEN-LAST:event_jComboBoxModelActionPerformed
    //delete a product from the order
    private void jButtonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteActionPerformed
        //the number of the selected row
        int row=jTableOrder.getSelectedRow();
        //add the deleted product on the list of the deleted products
        String deletedModel=String.valueOf(jTableOrder.getValueAt(row, 2));
        deletedList.add(deletedModel);
        //delete the row
        lista.removeRow(row);
    }//GEN-LAST:event_jButtonDeleteActionPerformed
    //add a product in the list of the order
    private void jButtonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddActionPerformed
        //list of the products of the order
        lista=(DefaultTableModel)jTableOrder.getModel();
        //if there is not a choice of the jComboBox
        if(jboxmodel==null)
        {
            //the inputs of the user
            jTextBrand=jTextWriteBrand.getText();
            jTextModel=jTextWriteModel.getText();
            quantity=jTextItems.getText();
            //if there are not all the fields filled
            if(jTextBrand.isEmpty()||jTextModel.isEmpty())
                JOptionPane.showMessageDialog(null,"please fill in the fields or select model from combobox,not both of them!");
            else
            {
                jmodel=jTextModel;
                marka=jTextBrand;
                //if there is selected category and quantity is filled
                if((jboxproduct!=null)&&(!quantity.isEmpty()))
                {
                    //add a row in the jTable
                    lista.addRow(new String[]{jboxproduct,marka,jmodel,quantity});
                    //make a string with the category the model the quantity and the brand
                    paraggelia=quantity+" item(s) of "+jboxproduct+", "+marka+" "+jmodel;
                    //the list of the products
                    OrderList.add(paraggelia);
                }
                //if there is not selected category or quantity
                else
                    JOptionPane.showMessageDialog(null,"please fill in all the fields and select model!");
            }
            //initialization of the fields for the next input
            jTextBrand=null;
            jTextWriteBrand.setText(null);
            jTextModel=null;
            jTextWriteModel.setText(null);
            jComboBoxModel.removeAllItems();
            jTextItems.setText(null);
            quantity=null;
        }
        //if there is a choice from the jComboBox
        if((jboxmodel!=null))
        {
            //the choices of the user
            jTextBrand=jTextWriteBrand.getText();
            jTextModel=jTextWriteModel.getText();
            quantity=jTextItems.getText();
            //if the user has chosen a model from the combobox
            if(jTextBrand.isEmpty()&&jTextModel.isEmpty())            
            {
                jmodel=jboxmodel;
                
                //if all the fields are filled
                if((jboxproduct!=null)&&(!quantity.isEmpty()))
                {
                    //add a rwo in the jTable
                    lista.addRow(new String[]{jboxproduct,marka,jboxmodel,quantity});
                    //make a string with the category the model the quantity and the brand
                    paraggelia=quantity+" item(s) of "+jboxproduct+", "+marka+" "+jmodel;
                    //the list of the products
                    OrderList.add(paraggelia);
                }
                //if there is not selected category or quantity
                else
                JOptionPane.showMessageDialog(null,"please fill in all the fields and select model!");
            }
            //if there is not selected category or quantity
            else
                JOptionPane.showMessageDialog(null,"please don't fill in the fields if you have select model from combobox!");
            //initialization of the fields for the next input
            jTextBrand=null;
            jTextModel=null;
            jmodel=null;
            marka=null;
            jboxmodel=null;
            jComboBoxModel.removeAllItems();
            jTextItems.setText(null);
            quantity=null;
        }
    }//GEN-LAST:event_jButtonAddActionPerformed
    //the choice of the category from jComboBoxProduct
    private void jComboBoxProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxProductActionPerformed
        //the choice from the jComboBoxProduct
        String chooseItem=jComboBoxProduct.getSelectedItem().toString();
        //if there is not a choice of category
        if(chooseItem=="CATEGORY...")
        {
            JOptionPane.showMessageDialog(null,"Please choose a category");
            chooseItem=null;
        }
        //if there is a selected category
        else
        {
        //find the corresponding table in the database
        jboxproduct= ordercon.getTheTableOrder(chooseItem);
        //the list of the models of the category
        List<String> models = ordercon.getListaOrderCon(jboxproduct);
        //if there are no list of models
        if(models.isEmpty())
            JOptionPane.showMessageDialog(null,"No list of models have found!Please try again! ");
        //the first element of the list
        models.add(0, "MODELS...");
        //delete of the list from a previous choice
        if(jComboBoxModel.getItemCount()>0)
            jComboBoxModel.removeAllItems();
        //create a list for the jComboBoxModel
        for(String a:models)
        {
            jComboBoxModel.addItem(a);
        }
        //reset the variable of the jComboBox
        jboxmodel=null;
        }
    }//GEN-LAST:event_jComboBoxProductActionPerformed

    private void jTextItemsKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextItemsKeyTyped
        //check if the input of the user is a digit
        char typeKey=evt.getKeyChar();
        if(!((Character.isDigit(typeKey)||(typeKey=='\b'))))
        {
            JOptionPane.showMessageDialog(this, "please insert a digit");
            evt.consume();
        }
    }//GEN-LAST:event_jTextItemsKeyTyped
    //save the order in the database
    private void jButtonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveActionPerformed
        //the OrderString which is each product of the order
        OrderString orderstring=new OrderString();
        DefaultTableModel tableRow=(DefaultTableModel)jTableOrder.getModel();
        //if the user hasn t fill in all the fields
        if(jTableOrder.getRowCount()==0)
            JOptionPane.showMessageDialog(null,"please fill in your id and add items in the list");
        else
        {
            //the order with arguments the user which make it and the list of the products
            Order orderCreated=new Order((ProductManager) ipallilos,OrderModelList);
            //update the list of the deleted productsενημέρωση της λίστας  με τα διεγραμμένα προϊόντα
            for(String d:OrderList)
            {
                //if the product is deleted
                for(String f:deletedList)
                {
                    if(d.endsWith(f))
                        finaDeletedlList.add(d);
                }                  
            }
            for(String d:OrderList)
            {
                //if the product is not deleted
                if(!finaDeletedlList.contains(d))
                {
                    //add in the final list of products of the order
                    OrderString orderstring1=new OrderString();
                    orderstring1.setProin(d);                   
                    OrderModelList.add(orderstring1);
                }
            }         
            //add the order in each product for the connection in the database of OrderString
            for(OrderString a:OrderModelList)
            {
                a.setOrderProin(orderCreated);
            }
                
            //save the order and the OrderStrings(products of the order) in the database
            if(ordercon.saveOrder(orderCreated))
            {
                JOptionPane.showMessageDialog(null,"The order has been saved in the database!");                
                for(OrderString a:OrderModelList)
                    saved=a.saveOrdString();
                    if(!saved)
                        JOptionPane.showMessageDialog(null,"The database hasn't been updated!");     
            } 
            //if the update of the database has failed
            else
                JOptionPane.showMessageDialog(null,"The order hasn t been saved.Please try again!");
            //reset the variables of the fields
            jTextItems.setText(null);
            jboxmodelChoice=null;
            for(int i=0;i<jTableOrder.getRowCount();i++)
                lista.removeRow(i);
            //delete the list from the previous choice
            if(jComboBoxModel.getItemCount()>0)
                jComboBoxModel.removeAllItems();
        }
    }//GEN-LAST:event_jButtonSaveActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(OrderCreateView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(OrderCreateView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(OrderCreateView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(OrderCreateView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new OrderCreateView().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAdd;
    private javax.swing.JButton jButtonDelete;
    private javax.swing.JButton jButtonSave;
    private javax.swing.JComboBox<String> jComboBoxModel;
    private javax.swing.JComboBox<String> jComboBoxProduct;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTableOrder;
    private javax.swing.JTextField jTextItems;
    private javax.swing.JTextField jTextWriteBrand;
    private javax.swing.JTextField jTextWriteModel;
    // End of variables declaration//GEN-END:variables
}
